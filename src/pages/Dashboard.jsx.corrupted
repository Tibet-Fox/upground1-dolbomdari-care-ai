import { useNavigate } from 'react-router-dom';
import { useState, useEffect } from 'react';
import { askChatbot } from '../api/chat';
import { getFaqQuestions, getFaqQuestionDetail } from '../api/faq';
import Header from '../components/Header';
import LeftSidebar from '../components/LeftSidebar';
import RightSidebar from '../components/RightSidebar';
import FaqPopup from '../components/FaqPopup';

function Dashboard() {
  const navigate = useNavigate();
  const [inputText, setInputText] = useState('');
  const [isChatMode, setIsChatMode] = useState(false);
  const [messages, setMessages] = useState([]);
  const [isLoading, setIsLoading] = useState(false);
  const [isChatHistoryOpen, setIsChatHistoryOpen] = useState(false);
  const [chatHistory, setChatHistory] = useState([]);
  const [selectedChatId, setSelectedChatId] = useState(null);
  const [isLeftSidebarOpen, setIsLeftSidebarOpen] = useState(false);
  const [isRightSidebarOpen, setIsRightSidebarOpen] = useState(false);
  const [isFaqPopupOpen, setIsFaqPopupOpen] = useState(false);

  // resetDashboard 이벤트 리스너 추가
  useEffect(() => {
    const handleResetDashboard = () => {
      console.log('Dashboard 리셋 이벤트 수신');
      setMessages([]);
      setIsChatMode(false);
      setIsChatHistoryOpen(false);
      setIsLoading(false);
      setInputText('');
      setIsLeftSidebarOpen(false);
      setIsRightSidebarOpen(false);
      setIsFaqPopupOpen(false);
    };

    window.addEventListener('resetDashboard', handleResetDashboard);

    return () => {
      window.removeEventListener('resetDashboard', handleResetDashboard);
    };
  }, []);

  // 카테고리별 기본 답변 생성 함수
  const generateDefaultAnswer = (question, categoryId) => {
    // 각 카테고리별 구체적인 질문 답변
    const questionAnswers = {
      1: { // 요양보호사 입·퇴사
        "요양보호사 입사 시 필요한 서류는 무엇인가요?": {
          greeting: "요양보호사 입사 시 필요한 서류에 대해 상세히 안내드릴게요!",
          summary: "입사 시에는 건강검진 결과서, 자격증 사본, 신분증 등 6가지 필수 서류가 필요합니다.",
          explanation: "요양보호사 입사 시 제출해야 할 필수 서류는 다음과 같습니다:\n\n📋 **필수 제출 서류**\n1. 건강검진 결과서 (최근 1년 이내)\n   - 일반건강검진 또는 종합건강검진 결과서\n   - 결핵검진 결과 포함\n\n2. 요양보호사 자격증 사본\n   - 보건복지부 발급 자격증\n   - 원본과 사본 함께 제출\n\n3. 신분증 사본\n   - 주민등록증 또는 운전면허증\n   - 주민번호 뒷자리 가림 처리\n\n4. 사진 2매 (3x4cm)\n   - 최근 6개월 이내 촬영\n   - 정장 차림 권장\n\n5. 이력서 및 자기소개서\n   - 최신 이력사항 포함\n   - 연락처 정확히 기재\n\n6. 급여계좌 통장 사본\n   - 본인 명의 통장\n   - 계좌번호 확인 가능\n\n⚠️ **제출 시 주의사항**\n• 모든 서류는 원본과 사본을 함께 제출\n• 서류 유효기간 확인 필수\n• 개인정보 보호를 위해 민감정보 가림 처리\n• 제출 전 서류 완성도 재확인",
          references: [
            { title: "요양보호사 입사 서류 가이드", url: "/documents/caregiver-onboarding-guide.pdf" },
            { title: "건강검진 결과서 발급 안내", url: "/documents/health-checkup-guide.pdf" }
          ]
        },
        "요양보호사 퇴사 시 4대보험 정리는 어떻게 하나요?": {
          greeting: "요양보호사 퇴사 시 4대보험 정리에 대해 상세히 안내드릴게요!",
          summary: "퇴사 시에는 14일 이내에 4대보험 해지 신청을 각 보험공단에 완료해야 합니다.",
          explanation: "요양보호사 퇴사 시 4대보험 정리 절차는 다음과 같습니다:\n\n📅 **퇴사 후 14일 이내 필수 처리사항**\n\n🏥 **1. 국민연금 해지 신청**\n• 신청 방법: 국민연금공단 홈페이지 또는 지사 방문\n• 필요 서류: 신분증, 퇴사확인서\n• 처리 시간: 즉시 처리\n\n🏥 **2. 건강보험 해지 신청**\n• 신청 방법: 국민건강보험공단 홈페이지 또는 지사 방문\n• 필요 서류: 신분증, 퇴사확인서\n• 처리 시간: 1-2일 소요\n\n🏥 **3. 고용보험 해지 신청**\n• 신청 방법: 고용노동부 홈페이지 또는 지사 방문\n• 필요 서류: 신분증, 퇴사확인서\n• 처리 시간: 즉시 처리\n\n🏥 **4. 산재보험 해지 신청**\n• 신청 방법: 근로복지공단 홈페이지 또는 지사 방문\n• 필요 서류: 신분증, 퇴사확인서\n• 처리 시간: 1-2일 소요\n\n⚠️ **주의사항**\n• 14일 초과 시 가입자격 상실로 인한 불이익 발생\n• 각 보험공단별로 해지 신청 방법이 다를 수 있음\n• 퇴사확인서는 근로기준법에 따라 반드시 발급받아야 함\n• 해지 신청 후 확인서 보관 필수",
          references: [
            { title: "4대보험 해지 신청 가이드", url: "/documents/insurance-termination-guide.pdf" },
            { title: "퇴사확인서 발급 안내", url: "/documents/termination-certificate-guide.pdf" }
          ]
        },
        "요양보호사 자격증은 어디서 발급받나요?": {
          greeting: "요양보호사 자격증 발급에 대해 상세히 안내드릴게요!",
          summary: "요양보호사 자격증은 보건복지부에서 발급하며, 교육과정 수료 후 자격시험을 통과해야 합니다.",
          explanation: "요양보호사 자격증 발급 절차는 다음과 같습니다:\n\n📚 **자격증 취득 과정**\n\n1️⃣ **교육과정 수료 (240시간)**\n• 요양보호사 교육기관에서 교육 수료\n• 이론교육 120시간 + 실습교육 120시간\n• 교육기관별로 교육 일정 상이\n\n2️⃣ **자격시험 응시**\n• 보건복지부에서 시행하는 국가자격시험\n• 필기시험과 실기시험으로 구성\n• 합격 기준: 100점 만점에 60점 이상\n\n3️⃣ **자격증 발급 신청**\n• 합격 후 보건복지부에 자격증 발급 신청\n• 신청 방법: 온라인 또는 우편 신청\n• 필요 서류: 신분증, 합격증명서, 사진\n\n4️⃣ **자격증 수령**\n• 발급 신청 후 2-3주 소요\n• 수령 방법: 우편 발송 또는 직접 수령\n\n💰 **비용 안내**\n• 교육비: 기관별 상이 (평균 50-80만원)\n• 시험 응시료: 15,000원\n• 자격증 발급료: 3,000원\n\n📞 **문의처**\n• 보건복지부: 129\n• 요양보호사 교육기관: 각 지역별 교육기관\n• 자격시험 관련: 한국보건의료인국가시험원",
          references: [
            { title: "요양보호사 자격증 발급 안내", url: "/documents/caregiver-license-guide.pdf" },
            { title: "요양보호사 교육기관 목록", url: "/documents/caregiver-education-institutes.pdf" }
          ]
        },
        "요양보호사 복무 규정은 어떻게 되나요?": {
          greeting: "요양보호사 복무 규정에 대해 상세히 안내드릴게요!",
          summary: "요양보호사는 근로기준법과 기관의 복무 규정을 준수해야 하며, 전문적이고 친절한 태도로 서비스를 제공해야 합니다.",
          explanation: "요양보호사 복무 규정의 주요 내용은 다음과 같습니다:\n\n⏰ **근무시간 및 휴식**\n• 근무시간: 1일 8시간, 주 40시간 원칙\n• 연장근무: 1일 최대 12시간까지 가능\n• 휴식시간: 4시간 이상 근무 시 30분, 8시간 이상 근무 시 1시간\n• 연차휴가: 1년간 80% 이상 출근 시 15일\n\n👔 **복장 및 태도**\n• 복장: 깔끔하고 활동하기 편한 복장\n• 신발: 안전하고 편안한 신발 착용\n• 태도: 친절하고 전문적인 태도 유지\n• 언어: 존댓말 사용, 어르신께 예의 바른 언어 사용\n\n📋 **서비스 제공 규정**\n• 개인정보 보호: 어르신의 개인정보 절대 유출 금지\n• 안전수칙: 어르신과 본인의 안전 최우선\n• 서비스 기록: 상담일지 정확히 작성\n• 긴급상황: 발생 시 즉시 기관에 보고\n\n🚫 **금지사항**\n• 개인적인 용무로 인한 서비스 중단\n• 어르신과의 개인적 금전 거래\n• 서비스 외 개인적 도움 요청\n• 어르신 가족과의 개인적 접촉\n\n📞 **보고 및 연락**\n• 서비스 시작/종료 시 기관에 보고\n• 어르신 상태 변화 시 즉시 보고\n• 긴급상황 발생 시 119 또는 기관에 연락\n• 정기적인 업무 보고 필수",
          references: [
            { title: "요양보호사 복무 규정", url: "/documents/caregiver-work-rules.pdf" },
            { title: "안전수칙 가이드", url: "/documents/safety-guidelines.pdf" }
          ]
        }
      },
      2: { // 급여 계산
        "요양보호사 야간근무 수당은 어떻게 계산하나요?": {
          greeting: "요양보호사 야간근무 수당 계산에 대해 상세히 안내드릴게요!",
          summary: "야간근무 수당은 기본급의 50% 추가 지급되며, 오후 10시~오전 6시에 근무할 때 적용됩니다.",
          explanation: "요양보호사 야간근무 수당 계산 방법은 다음과 같습니다:\n\n🌙 **야간근무 기본 정보**\n• 야간근무 시간: 오후 10시 ~ 오전 6시\n• 수당율: 기본급의 50% 추가\n• 지급 조건: 연속 8시간 야간근무 시\n• 중복 수당: 주휴수당과 별도로 지급\n\n💰 **계산 예시**\n• 기본급: 10,000원/시간\n• 야간수당: 10,000원 × 50% = 5,000원/시간\n• 총 야간급여: 10,000원 + 5,000원 = 15,000원/시간\n\n📋 **야간근무 시 주의사항**\n• 안전에 특히 유의해야 함\n• 어르신의 수면을 방해하지 않도록 조심\n• 긴급상황 발생 시 즉시 대응\n• 야간근무 기록을 정확히 작성\n\n⚠️ **야간근무 제한사항**\n• 연속 야간근무는 최대 8시간까지\n• 주간 근무와 야간근무 간 적절한 휴식 필요\n• 야간근무 후 충분한 휴식 시간 확보",
          references: [
            { title: "야간근무 수당 계산 가이드", url: "/documents/night-shift-allowance-guide.pdf" },
            { title: "근로기준법 야간근무 규정", url: "/documents/labor-standards-night-work.pdf" }
          ]
        },
        "방문요양 1시간 서비스 시 실 급여는 얼마인가요?": {
          greeting: "방문요양 1시간 서비스 실 급여에 대해 상세히 안내드릴게요!",
          summary: "방문요양 1시간 서비스 실 급여는 약 12,000원~15,000원이며, 지역과 기관에 따라 차이가 있습니다.",
          explanation: "방문요양 1시간 서비스 실 급여 구성은 다음과 같습니다:\n\n💰 **급여 구성 상세**\n\n1️⃣ **기본급: 10,000원~12,000원**\n• 서비스 제공에 대한 기본 보수\n• 경력과 자격에 따라 차등 지급\n• 지역별 최저임금 기준 적용\n\n2️⃣ **교통비: 1,000원~2,000원**\n• 방문 이동에 필요한 교통비\n• 대중교통 이용 시 실비 지급\n• 자가용 이용 시 연료비 포함\n\n3️⃣ **식대: 1,000원~1,500원**\n• 서비스 제공 중 식사 비용\n• 4시간 이상 근무 시 지급\n• 현금 또는 식권으로 지급\n\n📊 **총 실 급여 계산**\n• 최소: 10,000원 + 1,000원 + 1,000원 = 12,000원\n• 최대: 12,000원 + 2,000원 + 1,500원 = 15,500원\n\n💳 **실수령액 계산**\n• 4대보험 공제 후 실수령액: 약 10,000원~13,000원\n• 소득세 공제: 연말정산 시 정산\n• 지급일: 매월 25일 (기관별 상이)\n\n⚠️ **주의사항**\n• 지역과 기관에 따라 급여 차이가 있을 수 있음\n• 경력과 자격에 따라 기본급 차등 지급\n• 서비스 품질에 따른 성과급 추가 지급 가능",
          references: [
            { title: "방문요양 급여 기준표", url: "/documents/home-care-salary-guide.pdf" },
            { title: "요양보호사 급여 체계 안내", url: "/documents/caregiver-salary-system.pdf" }
          ]
        },
        "주휴수당은 주 15시간 미만 근무자에게도 발생하나요?": {
          greeting: "주휴수당 발생 조건에 대해 상세히 안내드릴게요!",
          summary: "주휴수당은 주 15시간 이상 근무자에게만 발생하며, 15시간 미만 근무자는 주휴수당이 없습니다.",
          explanation: "주휴수당 발생 조건은 다음과 같습니다:\n\n⏰ **주휴수당 발생 기준**\n• 주 15시간 이상 근무 시 발생\n• 주 15시간 미만 근무자는 주휴수당 없음\n• 근로기준법 제18조에 근거\n\n💰 **주휴수당 계산 방법**\n• 주휴수당 = 시급 × 주간 소정근로시간 × 1/40\n• 주간 소정근로시간: 실제 근무한 시간\n• 1/40: 주 40시간 기준 비율\n\n📊 **계산 예시**\n• 시급: 10,000원\n• 주간 근무시간: 20시간\n• 주휴수당 = 10,000원 × 20시간 × 1/40 = 5,000원\n\n❌ **주휴수당 미발생 경우**\n• 주 15시간 미만 근무\n• 일용직 근로자\n• 특수형태근로종사자\n• 단기 계약직 (1개월 미만)\n\n⚠️ **주의사항**\n• 근무시간은 실제 근무한 시간 기준\n• 휴게시간은 근무시간에 포함되지 않음\n• 연장근무 시간도 주휴수당 계산에 포함\n• 주휴수당은 기본급과 별도로 지급",
          references: [
            { title: "주휴수당 계산 가이드", url: "/documents/weekly-holiday-allowance-guide.pdf" },
            { title: "근로기준법 주휴수당 규정", url: "/documents/labor-standards-weekly-holiday.pdf" }
          ]
        },
        "4대보험 미가입자의 급여지급 시 유의사항이 있나요?": {
          greeting: "4대보험 미가입자 급여지급 유의사항에 대해 상세히 안내드릴게요!",
          summary: "4대보험 미가입자는 급여에서 보험료를 공제하지 않지만, 개인적으로 보험료를 납부해야 합니다.",
          explanation: "4대보험 미가입자 급여지급 시 유의사항은 다음과 같습니다:\n\n💳 **급여 지급 방식**\n• 보험료 공제 없음: 급여에서 4대보험료를 공제하지 않음\n• 실수령액 증가: 보험료 공제 전 금액이 실수령액\n• 총 급여 = 기본급 + 수당 + 교통비 + 식대\n\n💰 **개인부담금**\n• 보험료는 개인이 별도로 납부해야 함\n• 국민연금: 월 급여의 9% (개인부담 4.5%)\n• 건강보험: 월 급여의 약 7% (개인부담 3.545%)\n• 고용보험: 월 급여의 약 1.5% (개인부담 0.8%)\n• 산재보험: 업종별 차등 (개인부담 없음)\n\n📋 **세금 신고 의무**\n• 연말정산 시 소득세 신고 필요\n• 종합소득세 신고 의무\n• 소득공제 혜택 미적용\n• 세무서에서 별도 조사 가능\n\n⚠️ **주의사항**\n• 4대보험 미가입 시 장기적으로 불리\n• 노후연금 수령액 감소\n• 의료보험 혜택 제한\n• 실업급여 수령 불가\n\n✅ **권장사항**\n• 4대보험 가입을 권장\n• 개인사업자로 등록하여 가입\n• 지역가입자로 건강보험 가입\n• 국민연금 자격가입 신청",
          references: [
            { title: "4대보험 가입 안내", url: "/documents/insurance-enrollment-guide.pdf" },
            { title: "개인사업자 4대보험 가입 가이드", url: "/documents/self-employed-insurance-guide.pdf" }
          ]
        }
      },
      3: { // 제공계획서 작성
        "제공계획서는 언제 작성하나요?": {
          greeting: "제공계획서 작성 시기에 대해 안내드릴게요!",
          summary: "제공계획서는 서비스 시작 전에 작성해야 합니다.",
          explanation: "제공계획서 작성 시기는 다음과 같습니다:\n\n1. 서비스 시작 전: 어르신과 첫 만남 후 7일 이내\n2. 계획 변경 시: 서비스 내용 변경 시 즉시\n3. 정기 검토: 3개월마다 정기적으로 검토 및 수정\n4. 갱신 시기: 6개월마다 새로운 계획서 작성\n5. 긴급 변경: 어르신 상태 변화 시 즉시 수정\n\n제공계획서는 서비스의 질을 높이는 중요한 문서입니다.",
          references: [
            { title: "제공계획서 작성 가이드", url: "/documents/service-plan-guide.pdf" }
          ]
        },
        "제공계획서에 포함되어야 할 내용은 무엇인가요?": {
          greeting: "제공계획서 포함 내용에 대해 안내드릴게요!",
          summary: "어르신의 욕구, 목표, 서비스 내용, 평가 방법이 포함되어야 합니다.",
          explanation: "제공계획서에 포함되어야 할 내용은 다음과 같습니다:\n\n1. 어르신 기본정보: 이름, 나이, 주소, 연락처\n2. 욕구사정: 어르신이 원하는 서비스 내용\n3. 목표 설정: 달성하고자 하는 목표\n4. 서비스 내용: 구체적인 서비스 계획\n5. 제공 방법: 서비스 제공 방식과 시간\n6. 평가 방법: 목표 달성 여부 확인 방법\n7. 가족 요청사항: 가족이 요청한 특별한 사항\n\n모든 내용은 어르신과 가족의 동의를 받아야 합니다.",
          references: [
            { title: "제공계획서 작성 예시", url: "/documents/service-plan-example.pdf" }
          ]
        },
        "제공계획서 수정은 어떻게 하나요?": {
          greeting: "제공계획서 수정 방법에 대해 안내드릴게요!",
          summary: "어르신 상태 변화나 요청 시 즉시 수정할 수 있습니다.",
          explanation: "제공계획서 수정 절차는 다음과 같습니다:\n\n1. 수정 사유 확인: 어르신 상태 변화 또는 요청사항 파악\n2. 새로운 욕구사정: 변경된 욕구나 요청사항 조사\n3. 계획 수정: 기존 계획을 새로운 상황에 맞게 수정\n4. 동의 획득: 어르신과 가족의 동의 받기\n5. 서비스 조정: 수정된 계획에 따라 서비스 조정\n6. 문서화: 수정 내용을 계획서에 반영\n\n수정 시에는 반드시 어르신과 가족의 동의를 받아야 합니다.",
          references: [
            { title: "제공계획서 수정 가이드", url: "/documents/service-plan-revision-guide.pdf" }
          ]
        },
        "제공계획서 평가는 언제 하나요?": {
          greeting: "제공계획서 평가 시기에 대해 안내드릴게요!",
          summary: "서비스 제공 후 정기적으로 평가를 실시합니다.",
          explanation: "제공계획서 평가 시기는 다음과 같습니다:\n\n1. 정기 평가: 3개월마다 정기적으로 실시\n2. 중간 평가: 서비스 제공 중간에 실시\n3. 최종 평가: 서비스 종료 시 실시\n4. 긴급 평가: 어르신 상태 급변 시 즉시 실시\n5. 가족 요청 시: 가족이 요청할 때 실시\n\n평가 결과는 다음 계획 수립에 반영됩니다.",
          references: [
            { title: "제공계획서 평가 가이드", url: "/documents/service-plan-evaluation-guide.pdf" }
          ]
        }
      },
      4: { // 2025 고시 변경
        "2025년 요양보호사 급여 기준이 어떻게 변경되나요?": {
          greeting: "2025년 요양보호사 급여 기준 변경에 대해 안내드릴게요!",
          summary: "2025년부터 요양보호사 급여가 전반적으로 인상됩니다.",
          explanation: "2025년 요양보호사 급여 기준 변경 사항은 다음과 같습니다:\n\n1. 기본급 인상: 기존 대비 평균 8.5% 인상\n2. 야간수당: 기본급의 55%로 인상 (기존 50%)\n3. 주휴수당: 계산 방식 개선으로 실질 인상\n4. 교통비: 월 50,000원으로 인상 (기존 30,000원)\n5. 식대: 시간당 2,000원으로 인상 (기존 1,500원)\n\n구체적인 금액은 지역과 기관에 따라 차이가 있을 수 있습니다.",
          references: [
            { title: "2025년 요양보호사 급여 기준", url: "/documents/2025-salary-standard.pdf" }
          ]
        },
        "2025년 서비스 제공 시간이 변경되나요?": {
          greeting: "2025년 서비스 제공 시간 변경에 대해 안내드릴게요!",
          summary: "2025년부터 서비스 제공 시간이 더욱 유연해집니다.",
          explanation: "2025년 서비스 제공 시간 변경 사항은 다음과 같습니다:\n\n1. 최소 서비스 시간: 30분 단위로 조정 가능\n2. 야간 서비스: 오후 8시~오전 8시 확대\n3. 주말 서비스: 토요일 오후 서비스 추가\n4. 공휴일 서비스: 공휴일에도 서비스 제공 가능\n5. 긴급 서비스: 24시간 긴급 서비스 체계 구축\n\n어르신의 필요에 따라 더욱 유연한 서비스가 가능해집니다.",
          references: [
            { title: "2025년 서비스 시간 변경 안내", url: "/documents/2025-service-time-changes.pdf" }
          ]
        },
        "2025년 자격 요건이 변경되나요?": {
          greeting: "2025년 자격 요건 변경에 대해 안내드릴게요!",
          summary: "2025년부터 요양보호사 자격 요건이 강화됩니다.",
          explanation: "2025년 요양보호사 자격 요건 변경 사항은 다음과 같습니다:\n\n1. 교육 시간: 240시간에서 280시간으로 증가\n2. 실습 시간: 40시간에서 60시간으로 증가\n3. 자격시험: 필기시험과 실기시험 분리\n4. 갱신 교육: 3년마다 24시간 갱신 교육 의무화\n5. 전문 분야: 특화 분야별 추가 교육 과정 신설\n\n기존 자격증 소지자는 2025년 12월까지 갱신 교육을 완료해야 합니다.",
          references: [
            { title: "2025년 자격 요건 변경 안내", url: "/documents/2025-qualification-changes.pdf" }
          ]
        },
        "2025년 복지 혜택이 추가되나요?": {
          greeting: "2025년 복지 혜택 추가에 대해 안내드릴게요!",
          summary: "2025년부터 요양보호사 복지 혜택이 대폭 확대됩니다.",
          explanation: "2025년 요양보호사 복지 혜택 추가 사항은 다음과 같습니다:\n\n1. 건강검진: 연 2회 무료 건강검진\n2. 교육 지원: 연간 100만원 교육비 지원\n3. 휴가 지원: 연차휴가 사용 시 추가 수당 지급\n4. 보험 지원: 상해보험 가입비 지원\n5. 정착 지원: 신규 입사자 정착금 100만원 지원\n6. 자녀 교육: 자녀 교육비 일부 지원\n\n복지 혜택은 기관 규모와 근무 조건에 따라 차이가 있을 수 있습니다.",
          references: [
            { title: "2025년 복지 혜택 안내", url: "/documents/2025-welfare-benefits.pdf" }
          ]
        }
      },
      5: { // 상담일지 작성
        "상담일지 작성 시 주의사항은 무엇인가요?": {
          greeting: "상담일지 작성 주의사항에 대해 안내드릴게요!",
          summary: "객관적이고 구체적으로 작성하며, 개인정보 보호에 유의해야 합니다.",
          explanation: "상담일지 작성 시 주의사항은 다음과 같습니다:\n\n1. 객관적 기록: 사실에 근거한 객관적인 내용으로 작성\n2. 구체적 기술: '좋았다', '나빴다' 대신 구체적인 행동 기술\n3. 개인정보 보호: 민감한 개인정보는 기재하지 않음\n4. 시간 순서: 서비스 제공 순서대로 시간순 기록\n5. 가족 요청사항: 가족이 요청한 사항도 포함\n6. 서명 확인: 작성 후 어르신 또는 가족 서명 받기\n\n상담일지는 법적 증빙자료이므로 정확하게 작성해야 합니다.",
          references: [
            { title: "상담일지 작성 주의사항", url: "/documents/consultation-log-precautions.pdf" }
          ]
        },
        "상담일지에 반드시 포함되어야 할 내용은 무엇인가요?": {
          greeting: "상담일지 필수 포함 내용에 대해 안내드릴게요!",
          summary: "서비스 제공 시간, 내용, 어르신 반응, 다음 계획이 포함되어야 합니다.",
          explanation: "상담일지에 반드시 포함되어야 할 내용은 다음과 같습니다:\n\n1. 기본 정보: 날짜, 시간, 서비스 제공 시간\n2. 서비스 내용: 구체적으로 제공한 서비스 내용\n3. 어르신 상태: 어르신의 건강 상태와 기분\n4. 어르신 반응: 서비스에 대한 어르신의 반응\n5. 특이사항: 특별히 주의할 점이나 변화\n6. 가족 요청사항: 가족이 요청한 사항\n7. 다음 계획: 다음 서비스 계획\n8. 서명: 요양보호사, 어르신 또는 가족 서명\n\n모든 내용은 구체적이고 객관적으로 작성해야 합니다.",
          references: [
            { title: "상담일지 작성 예시", url: "/documents/consultation-log-example.pdf" }
          ]
        },
        "상담일지 작성 시간은 언제인가요?": {
          greeting: "상담일지 작성 시간에 대해 안내드릴게요!",
          summary: "서비스 제공 직후 또는 당일 중에 작성해야 합니다.",
          explanation: "상담일지 작성 시간은 다음과 같습니다:\n\n1. 즉시 작성: 서비스 제공 직후 가능한 한 빨리 작성\n2. 당일 완료: 서비스 제공 당일 중에 반드시 작성 완료\n3. 기억 생생할 때: 기억이 생생할 때 작성하는 것이 정확함\n4. 정기 작성: 매일 정해진 시간에 작성하는 습관\n5. 검토 시간: 작성 후 내용을 다시 한번 검토\n\n늦어도 서비스 제공 다음 날까지는 반드시 작성해야 합니다.",
          references: [
            { title: "상담일지 작성 시간 가이드", url: "/documents/consultation-log-timing.pdf" }
          ]
        },
        "상담일지 오류 수정은 어떻게 하나요?": {
          greeting: "상담일지 오류 수정 방법에 대해 안내드릴게요!",
          summary: "오류 발견 시 즉시 수정하고 수정 사유를 명시해야 합니다.",
          explanation: "상담일지 오류 수정 방법은 다음과 같습니다:\n\n1. 즉시 수정: 오류 발견 시 즉시 수정\n2. 수정 표시: 오류 부분을 한 줄로 지우고 위에 수정 내용 작성\n3. 수정 사유: 수정 사유를 간단히 메모\n4. 수정 날짜: 수정한 날짜와 시간 기록\n5. 서명 확인: 수정 후 어르신 또는 가족 서명 받기\n6. 원본 보존: 원본 내용을 완전히 지우지 말고 수정 표시\n\n수정 시에는 투명하고 정확하게 처리해야 합니다.",
          references: [
            { title: "상담일지 오류 수정 가이드", url: "/documents/consultation-log-correction.pdf" }
          ]
        }
      },
      6: { // AI 상담 사용법
        "AI 상담은 언제 이용할 수 있나요?": {
          greeting: "AI 상담 이용 시간에 대해 안내드릴게요!",
          summary: "AI 상담은 24시간 언제든지 이용할 수 있습니다.",
          explanation: "AI 상담 이용 시간은 다음과 같습니다:\n\n1. 24시간 이용: 언제든지 질문하고 답변 받기 가능\n2. 즉시 응답: 질문 후 몇 초 내에 답변 제공\n3. 복잡한 상담: 복잡한 상담의 경우 전문 상담원 연결\n4. 긴급 상담: 긴급한 경우 즉시 전문가 연결\n5. 정기 상담: 정기적인 상담도 가능\n\nAI 상담은 요양보호사님의 업무 효율성을 높여드립니다.",
          references: [
            { title: "AI 상담 이용 가이드", url: "/documents/ai-consultation-guide.pdf" }
          ]
        },
        "AI 상담에서 어떤 질문을 할 수 있나요?": {
          greeting: "AI 상담 질문 범위에 대해 안내드릴게요!",
          summary: "요양보호 업무와 관련된 모든 질문을 할 수 있습니다.",
          explanation: "AI 상담에서 할 수 있는 질문은 다음과 같습니다:\n\n1. 업무 관련: 급여, 근무, 서비스 제공 방법\n2. 법규 관련: 관련 법령, 규정, 기준\n3. 기술 관련: 요양보호 기술, 안전 수칙\n4. 행정 관련: 서류 작성, 절차, 제도\n5. 복지 관련: 복지 혜택, 지원 제도\n6. 기타: 궁금한 모든 사항\n\n복잡한 상담의 경우 전문 상담원이 연결됩니다.",
          references: [
            { title: "AI 상담 질문 예시", url: "/documents/ai-consultation-examples.pdf" }
          ]
        },
        "AI 상담 답변의 정확도는 어떻게 되나요?": {
          greeting: "AI 상담 답변 정확도에 대해 안내드릴게요!",
          summary: "AI 상담은 공단 기준에 맞는 정확한 답변을 제공합니다.",
          explanation: "AI 상담 답변 정확도는 다음과 같습니다:\n\n1. 공단 기준: 보건복지부 및 관련 공단 기준 준수\n2. 최신 정보: 최신 법령과 제도 반영\n3. 검증된 답변: 전문가 검토를 거친 답변\n4. 지속 업데이트: 새로운 정보로 지속 업데이트\n5. 전문가 연결: 복잡한 경우 전문가 연결\n\nAI 답변에 의문이 있으면 언제든지 전문가와 상담하실 수 있습니다.",
          references: [
            { title: "AI 상담 정확도 안내", url: "/documents/ai-consultation-accuracy.pdf" }
          ]
        },
        "AI 상담 기록은 어떻게 관리되나요?": {
          greeting: "AI 상담 기록 관리에 대해 안내드릴게요!",
          summary: "AI 상담 기록은 안전하게 보관되며 개인정보가 보호됩니다.",
          explanation: "AI 상담 기록 관리 방법은 다음과 같습니다:\n\n1. 안전 보관: 암호화된 서버에 안전하게 보관\n2. 개인정보 보호: 개인정보는 별도 분리 보관\n3. 접근 제한: 본인만 접근 가능\n4. 보관 기간: 3년간 보관 후 자동 삭제\n5. 내보내기: 필요 시 상담 기록 내보내기 가능\n6. 삭제 요청: 언제든지 기록 삭제 요청 가능\n\n개인정보 보호법을 준수하여 안전하게 관리됩니다.",
          references: [
            { title: "AI 상담 기록 관리 안내", url: "/documents/ai-consultation-records.pdf" }
          ]
        }
      }
    };

    // 해당 카테고리의 질문 답변 찾기
    if (categoryId && questionAnswers[categoryId]) {
      const categoryQuestions = questionAnswers[categoryId];
      
      // 정확한 질문 매칭 시도
      if (categoryQuestions[question]) {
        return categoryQuestions[question];
      }
      
      // 부분 매칭 시도 (질문에 키워드가 포함된 경우)
      for (const [key, value] of Object.entries(categoryQuestions)) {
        if (question.includes(key) || key.includes(question)) {
          return value;
        }
      }
    }

    // 매칭되는 질문이 없으면 카테고리별 기본 답변 반환
    const defaultAnswers = {
      1: { // 요양보호사 입·퇴사
        greeting: "요양보호사 입·퇴사에 대해 궁금하셨군요! 안내드릴게요.",
        summary: "요양보호사 입사 시에는 건강검진과 서류 제출이, 퇴사 시에는 4대보험 정리가 필요합니다.",
        explanation: "요양보호사 입사 시에는 건강검진 결과서(최근 1년 이내), 요양보호사 자격증 사본, 신분증 사본, 사진 2매, 이력서, 급여계좌 통장 사본 등을 제출해야 합니다. 퇴사 시에는 퇴사일로부터 14일 이내에 4대보험(국민연금, 건강보험, 고용보험, 산재보험) 해지 신청을 각 보험공단에 완료해야 합니다. 구체적인 절차는 각 보험공단 홈페이지에서 확인하실 수 있습니다.",
        references: [
          { title: "요양보호사 입·퇴사 가이드", url: "/documents/caregiver-onboarding-guide.pdf" }
        ]
      },
      2: { // 급여 계산
        greeting: "급여 계산에 대해 궁금하셨군요! 안내드릴게요.",
        summary: "기본급, 야간수당, 주휴수당, 교통비 등이 포함됩니다.",
        explanation: "요양보호사 급여는 기본급에 야간수당(50%), 주휴수당, 교통비, 식대 등이 추가됩니다. 구체적인 계산 방법과 금액은 지역과 기관에 따라 차이가 있을 수 있습니다.",
        references: [
          { title: "급여 계산 가이드", url: "/documents/salary-calculation-guide.pdf" }
        ]
      },
      3: { // 제공계획서 작성
        greeting: "제공계획서 작성에 대해 궁금하셨군요! 안내드릴게요.",
        summary: "어르신의 욕구와 목표를 고려한 맞춤형 서비스 계획을 수립합니다.",
        explanation: "제공계획서는 어르신의 건강상태, 가족 상황, 선호도를 종합적으로 고려하여 작성합니다. 서비스 시작 전 어르신과 첫 만남 후 7일 이내에 작성하며, 서비스 제공 시간, 횟수, 내용을 구체적으로 명시합니다. 3개월마다 정기적으로 검토하고 수정하며, 어르신 상태 변화 시 즉시 계획을 조정합니다. 모든 내용은 어르신과 가족의 동의를 받아야 합니다.",
        references: [
          { title: "제공계획서 작성 가이드", url: "/documents/service-plan-guide.pdf" }
        ]
      },
      4: { // 2025 고시 변경
        greeting: "2025 고시 변경에 대해 궁금하셨군요! 안내드릴게요.",
        summary: "2025년부터 요양보호사 급여와 복지 혜택이 대폭 개선됩니다.",
        explanation: "2025년 고시 변경으로 요양보호사 급여가 평균 8.5% 인상되며, 야간수당은 기본급의 55%로 증가합니다. 교통비는 월 50,000원으로, 식대는 시간당 2,000원으로 인상됩니다. 서비스 제공 시간도 더욱 유연해져 30분 단위 조정이 가능하며, 야간 서비스가 오후 8시~오전 8시로 확대됩니다. 복지 혜택으로는 연 2회 무료 건강검진, 연간 100만원 교육비 지원, 신규 입사자 정착금 100만원 지원 등이 추가됩니다.",
        references: [
          { title: "2025년 고시 변경사항 안내", url: "/documents/2025-notice-changes.pdf" }
        ]
      },
      5: { // 상담일지 작성
        greeting: "상담일지 작성에 대해 궁금하셨군요! 안내드릴게요.",
        summary: "서비스 제공 내용과 어르신 상태를 객관적이고 구체적으로 기록합니다.",
        explanation: "상담일지는 서비스 제공 직후 또는 당일 중에 작성해야 하며, 날짜, 시간, 서비스 제공 시간, 구체적인 서비스 내용, 어르신의 건강 상태와 기분, 어르신의 반응, 특이사항, 가족 요청사항, 다음 서비스 계획 등을 포함해야 합니다. 객관적이고 구체적인 내용으로 작성하며, '좋았다', '나빴다' 대신 구체적인 행동을 기술합니다. 개인정보 보호에 유의하고, 작성 후 어르신 또는 가족의 서명을 받아야 합니다. 상담일지는 법적 증빙자료이므로 정확하게 작성해야 합니다.",
        references: [
          { title: "상담일지 작성 가이드", url: "/documents/consultation-log-guide.pdf" }
        ]
      },
      6: { // AI 상담 사용법
        greeting: "AI 상담 사용법에 대해 궁금하셨군요! 안내드릴게요.",
        summary: "24시간 언제든지 궁금한 점을 질문하면 즉시 답변을 받을 수 있습니다.",
        explanation: "AI 상담은 24시간 언제든지 이용할 수 있으며, 요양보호 업무와 관련된 모든 질문에 대해 공단 기준에 맞는 정확한 답변을 제공합니다. 급여, 근무, 서비스 제공 방법, 관련 법령, 규정, 기준, 요양보호 기술, 안전 수칙, 서류 작성, 절차, 제도, 복지 혜택, 지원 제도 등 궁금한 모든 사항을 질문할 수 있습니다. 복잡한 상담의 경우 전문 상담원이 연결되며, 상담 기록은 안전하게 보관되어 개인정보가 보호됩니다. 빠른 질문 버튼을 클릭하거나 직접 입력창에 질문을 입력하세요.",
        references: [
          { title: "AI 상담 사용 가이드", url: "/documents/ai-consultation-guide.pdf" }
        ]
      }
    };

    // 카테고리별 기본 답변 반환
    if (categoryId && defaultAnswers[categoryId]) {
      return defaultAnswers[categoryId];
    }

    // 기본 답변
    return {
      greeting: `${question}에 대한 답변입니다.`,
      summary: "자세한 내용은 FAQ 섹션에서 확인하실 수 있습니다.",
      explanation: "궁금한 점이 있으시면 언제든지 질문해주세요.",
      references: []
    };
  };

  const handleSendMessage = async () => {
    if (!inputText.trim()) return;

    // 채팅 모드로 전환
    setIsChatMode(true);
    setIsChatHistoryOpen(false);

    const userMessage = {
      id: Date.now(),
      text: inputText,
      sender: 'user',
      timestamp: new Date().toLocaleTimeString()
    };

    setMessages(prev => [...prev, userMessage]);
    setInputText('');
    setIsLoading(true);

    try {
      // 백엔드 API 호출
      const response = await askChatbot(inputText);
      
      // 응답 데이터 처리
      let botResponse = response.bot_message || "죄송합니다. 답변을 생성하는 중에 오류가 발생했습니다.";
      let suggestions = response.suggestions || null;
      
      // 응답이 구조화된 객체인지 확인
      if (typeof botResponse === 'object' && botResponse.greeting) {
        // 구조화된 응답인 경우 그대로 사용
        botResponse = botResponse;
      } else if (typeof botResponse === 'string') {
        // 일반 텍스트 응답인 경우 구조화
        botResponse = {
          greeting: botResponse,
          summary: "",
          explanation: "",
          references: []
        };
      }
      
      const botMessage = {
        id: Date.now() + 1,
        text: botResponse,
        sender: 'ai',
        timestamp: new Date().toLocaleTimeString(),
        suggestions: suggestions
      };

      setMessages(prev => [...prev, botMessage]);

      // sendMessageWithAI가 자동으로 메시지를 저장하므로 별도 저장 불필요

    } catch (error) {
      console.error('채팅 오류:', error);
      
      let errorMessage = "죄송합니다. 일시적인 오류가 발생했습니다. 다시 시도해주세요.";
      
      // 인증 오류인 경우 특별한 메시지 표시
      if (error.message && error.message.includes('로그인이 필요합니다')) {
        errorMessage = "로그인이 필요합니다. 다시 로그인해주세요.";
      }
      
      const errorBotMessage = {
        id: Date.now() + 1,
        text: errorMessage,
        sender: 'ai',
        timestamp: new Date().toLocaleTimeString()
      };
      
      setMessages(prev => [...prev, errorBotMessage]);
    } finally {
      setIsLoading(false);
    }
  };

  const handleQuestionClick = async (category) => {
    setIsChatMode(true);
    setIsChatHistoryOpen(false);
    
    const userMessage = {
      id: Date.now(),
      text: category,
      sender: 'user',
      timestamp: new Date().toLocaleTimeString()
    };

    setMessages(prev => [...prev, userMessage]);
    setIsLoading(true);

    try {
      // 카테고리 ID 매핑
      const categoryMap = {
        '요양보호사 입·퇴사': 1,
        '급여 계산': 2,
        '제공계획서 작성': 3,
        '2025 고시 변경': 4,
        '상담일지 작성': 5,
        'AI 상담 사용법': 6
      };

      const categoryId = categoryMap[category];
      
      if (categoryId) {
        try {
          // FAQ API에서 질문 목록 가져오기
          const questions = await getFaqQuestions(categoryId);
          
          // 카테고리별 상세한 기본 답변 생성
          const categoryResponse = generateDefaultAnswer(category, categoryId);
          
          // 질문 리스트를 제안 질문으로 변환
          let suggestions = [];
          if (questions && questions.length > 0) {
            suggestions = questions.map((q, index) => 
              `Q${index + 1}. ${q.question}`
            );
          } else {
            // FAQ API에서 질문을 가져올 수 없는 경우 카테고리별 기본 제안 질문 생성
            const defaultSuggestions = {
              1: [ // 요양보호사 입·퇴사
                "Q1. 요양보호사 입사 시 필요한 서류는 무엇인가요?",
                "Q2. 요양보호사 퇴사 시 4대보험 정리는 어떻게 하나요?",
                "Q3. 요양보호사 자격증은 어디서 발급받나요?",
                "Q4. 요양보호사 복무 규정은 어떻게 되나요?"
              ],
              2: [ // 급여 계산
                "Q1. 요양보호사 야간근무 수당은 어떻게 계산하나요?",
                "Q2. 방문요양 1시간 서비스 시 실 급여는 얼마인가요?",
                "Q3. 주휴수당은 주 15시간 미만 근무자에게도 발생하나요?",
                "Q4. 4대보험 미가입자의 급여지급 시 유의사항이 있나요?"
              ],
              3: [ // 제공계획서 작성
                "Q1. 제공계획서는 언제 작성하나요?",
                "Q2. 제공계획서에 포함되어야 할 내용은 무엇인가요?",
                "Q3. 제공계획서 수정은 어떻게 하나요?",
                "Q4. 제공계획서 평가는 언제 하나요?"
              ],
              4: [ // 2025 고시 변경
                "Q1. 2025년 요양보호사 급여 기준이 어떻게 변경되나요?",
                "Q2. 2025년 서비스 제공 시간이 변경되나요?",
                "Q3. 2025년 자격 요건이 변경되나요?",
                "Q4. 2025년 복지 혜택이 추가되나요?"
              ],
              5: [ // 상담일지 작성
                "Q1. 상담일지 작성 시 주의사항은 무엇인가요?",
                "Q2. 상담일지에 반드시 포함되어야 할 내용은 무엇인가요?",
                "Q3. 상담일지 작성 시간은 언제인가요?",
                "Q4. 상담일지 오류 수정은 어떻게 하나요?"
              ],
              6: [ // AI 상담 사용법
                "Q1. AI 상담은 언제 이용할 수 있나요?",
                "Q2. AI 상담에서 어떤 질문을 할 수 있나요?",
                "Q3. AI 상담 답변의 정확도는 어떻게 되나요?",
                "Q4. AI 상담 기록은 어떻게 관리되나요?"
              ]
            };
            
            suggestions = defaultSuggestions[categoryId] || [];
          }
          
          // AI 응답 표시 (카테고리별 상세 답변 + 질문 리스트)
          const botMessage = {
            id: Date.now() + 1,
            text: categoryResponse,
            sender: 'ai',
            timestamp: new Date().toLocaleTimeString(),
            suggestions: suggestions
          };

          setMessages(prev => [...prev, botMessage]);

          // sendMessageWithAI가 자동으로 메시지를 저장하므로 별도 저장 불필요

        } catch (faqError) {
          console.error('FAQ API 오류:', faqError);
          // FAQ API 실패 시에도 카테고리별 기본 답변 제공
          const botResponse = generateDefaultAnswer(category, categoryId);
          const botMessage = {
            id: Date.now() + 1,
            text: botResponse,
            sender: 'ai',
            timestamp: new Date().toLocaleTimeString()
          };

          setMessages(prev => [...prev, botMessage]);

          // sendMessageWithAI가 자동으로 메시지를 저장하므로 별도 저장 불필요

        }
      } else {
        // 카테고리 ID를 찾을 수 없는 경우 기본 답변
        const botResponse = {
          greeting: `${category}에 대한 답변입니다.`,
          summary: "자세한 내용은 FAQ 섹션에서 확인하실 수 있습니다.",
          explanation: "궁금한 점이 있으시면 언제든지 질문해주세요.",
          references: []
        };
        
        const botMessage = {
          id: Date.now() + 1,
          text: botResponse,
          sender: 'ai',
          timestamp: new Date().toLocaleTimeString()
        };

        setMessages(prev => [...prev, botMessage]);

        // sendMessageWithAI가 자동으로 메시지를 저장하므로 별도 저장 불필요

      }
    } catch (error) {
      console.error('빠른 채팅 오류:', error);
      const errorMessage = {
        id: Date.now() + 1,
        text: "죄송합니다. 답변을 가져오는 중에 오류가 발생했습니다. 잠시 후 다시 시도해주세요.",
        sender: 'ai',
        timestamp: new Date().toLocaleTimeString()
      };
      setMessages(prev => [...prev, errorMessage]);
    } finally {
      setIsLoading(false);
    }
  };

  // 제안 질문 클릭 처리 함수
  const handleSuggestionClick = async (suggestion) => {
    if (!suggestion) return;

    const newMessage = {
      id: Date.now(),
      text: suggestion,
      sender: 'user',
      timestamp: new Date().toLocaleTimeString()
    };
    setMessages(prev => [...prev, newMessage]);
    
    // 로딩 메시지 추가
    const loadingMessage = {
      id: Date.now() + 1,
      text: "🤖 돌봄이가 답변을 준비하고 있습니다...",
      sender: 'ai',
      timestamp: new Date().toLocaleTimeString(),
      isLoading: true
    };
    setMessages(prev => [...prev, loadingMessage]);

    try {
      // Q1, Q2, Q3 등의 형식에서 질문 번호와 실제 질문 추출
      const questionMatch = suggestion.match(/Q(\d+)\.\s*(.+)/);
      const questionNumber = questionMatch ? parseInt(questionMatch[1]) : null;
      const actualQuestion = questionMatch ? questionMatch[2] : suggestion;
      
      // 현재 활성화된 프리셋 카테고리 찾기
      let categoryId = null;
      
      for (let i = messages.length - 1; i >= 0; i--) {
        const message = messages[i];
        if (message.sender === 'user') {
          const categoryMap = {
            '요양보호사 입·퇴사': 1,
            '급여 계산': 2,
            '제공계획서 작성': 3,
            '2025 고시 변경': 4,
            '상담일지 작성': 5,
            'AI 상담 사용법': 6
          };
          
          if (categoryMap[message.text]) {
            categoryId = categoryMap[message.text];
            break;
          }
        }
      }
      
      let botResponse = null;
      
      if (categoryId) {
        // 간단한 키워드 기반 매칭
        const keywords = actualQuestion.toLowerCase();
        
        if (categoryId === 1) { // 요양보호사 입·퇴사
          if (keywords.includes('입사') && keywords.includes('서류')) {
            botResponse = {
              greeting: "요양보호사 입사 시 필요한 서류에 대해 상세히 안내드릴게요!",
              summary: "입사 시에는 건강검진 결과서, 자격증 사본, 신분증 등 6가지 필수 서류가 필요합니다.",
              explanation: "요양보호사 입사 시 제출해야 할 필수 서류는 다음과 같습니다:\n\n📋 **필수 제출 서류**\n1. 건강검진 결과서 (최근 1년 이내)\n2. 요양보호사 자격증 사본\n3. 신분증 사본\n4. 사진 2매 (3x4cm)\n5. 이력서 및 자기소개서\n6. 급여계좌 통장 사본\n\n⚠️ **제출 시 주의사항**\n• 모든 서류는 원본과 사본을 함께 제출\n• 서류 유효기간 확인 필수\n• 개인정보 보호를 위해 민감정보 가림 처리",
              references: [
                { title: "요양보호사 입사 서류 가이드", url: "/documents/caregiver-onboarding-guide.pdf" }
              ]
            };
          } else if (keywords.includes('퇴사') && keywords.includes('4대보험')) {
            botResponse = {
              greeting: "요양보호사 퇴사 시 4대보험 정리에 대해 상세히 안내드릴게요!",
              summary: "퇴사 시에는 14일 이내에 4대보험 해지 신청을 각 보험공단에 완료해야 합니다.",
              explanation: "요양보호사 퇴사 시 4대보험 정리 절차는 다음과 같습니다:\n\n📅 **퇴사 후 14일 이내 필수 처리사항**\n\n🏥 **1. 국민연금 해지 신청**\n🏥 **2. 건강보험 해지 신청**\n🏥 **3. 고용보험 해지 신청**\n🏥 **4. 산재보험 해지 신청**\n\n⚠️ **주의사항**\n• 14일 초과 시 가입자격 상실로 인한 불이익 발생\n• 각 보험공단별로 해지 신청 방법이 다를 수 있음",
              references: [
                { title: "4대보험 해지 신청 가이드", url: "/documents/insurance-termination-guide.pdf" }
              ]
            };
          } else if (keywords.includes('자격증') && keywords.includes('발급')) {
            botResponse = {
              greeting: "요양보호사 자격증 발급에 대해 상세히 안내드릴게요!",
              summary: "요양보호사 자격증은 보건복지부에서 발급하며, 교육과정 수료 후 자격시험을 통과해야 합니다.",
              explanation: "요양보호사 자격증 발급 절차는 다음과 같습니다:\n\n📚 **자격증 취득 과정**\n\n1️⃣ **교육과정 수료 (240시간)**\n2️⃣ **자격시험 응시**\n3️⃣ **자격증 발급 신청**\n4️⃣ **자격증 수령**\n\n💰 **비용 안내**\n• 교육비: 기관별 상이 (평균 50-80만원)\n• 시험 응시료: 15,000원\n• 자격증 발급료: 3,000원",
              references: [
                { title: "요양보호사 자격증 발급 안내", url: "/documents/caregiver-license-guide.pdf" }
              ]
            };
          } else if (keywords.includes('복무') && keywords.includes('규정')) {
            botResponse = {
              greeting: "요양보호사 복무 규정에 대해 상세히 안내드릴게요!",
              summary: "요양보호사는 근로기준법과 기관의 복무 규정을 준수해야 하며, 전문적이고 친절한 태도로 서비스를 제공해야 합니다.",
              explanation: "요양보호사 복무 규정의 주요 내용은 다음과 같습니다:\n\n⏰ **근무시간 및 휴식**\n• 근무시간: 1일 8시간, 주 40시간 원칙\n• 휴식시간: 4시간 이상 근무 시 30분, 8시간 이상 근무 시 1시간\n\n👔 **복장 및 태도**\n• 복장: 깔끔하고 활동하기 편한 복장\n• 태도: 친절하고 전문적인 태도 유지\n\n📋 **서비스 제공 규정**\n• 개인정보 보호: 어르신의 개인정보 절대 유출 금지\n• 안전수칙: 어르신과 본인의 안전 최우선",
              references: [
                { title: "요양보호사 복무 규정", url: "/documents/caregiver-work-rules.pdf" }
              ]
            };
          }
        } else if (categoryId === 2) { // 급여 계산
          if (keywords.includes('야간') && keywords.includes('수당')) {
            botResponse = {
              greeting: "요양보호사 야간근무 수당 계산에 대해 상세히 안내드릴게요!",
              summary: "야간근무 수당은 기본급의 50% 추가 지급되며, 오후 10시~오전 6시에 근무할 때 적용됩니다.",
              explanation: "요양보호사 야간근무 수당 계산 방법은 다음과 같습니다:\n\n🌙 **야간근무 기본 정보**\n• 야간근무 시간: 오후 10시 ~ 오전 6시\n• 수당율: 기본급의 50% 추가\n• 지급 조건: 연속 8시간 야간근무 시\n\n💰 **계산 예시**\n• 기본급: 10,000원/시간\n• 야간수당: 10,000원 × 50% = 5,000원/시간\n• 총 야간급여: 10,000원 + 5,000원 = 15,000원/시간",
              references: [
                { title: "야간근무 수당 계산 가이드", url: "/documents/night-shift-allowance-guide.pdf" }
              ]
            };
          } else if (keywords.includes('방문요양') && keywords.includes('급여')) {
            botResponse = {
              greeting: "방문요양 1시간 서비스 실 급여에 대해 상세히 안내드릴게요!",
              summary: "방문요양 1시간 서비스 실 급여는 약 12,000원~15,000원이며, 지역과 기관에 따라 차이가 있습니다.",
              explanation: "방문요양 1시간 서비스 실 급여 구성은 다음과 같습니다:\n\n💰 **급여 구성 상세**\n\n1️⃣ **기본급: 10,000원~12,000원**\n2️⃣ **교통비: 1,000원~2,000원**\n3️⃣ **식대: 1,000원~1,500원**\n\n📊 **총 실 급여 계산**\n• 최소: 10,000원 + 1,000원 + 1,000원 = 12,000원\n• 최대: 12,000원 + 2,000원 + 1,500원 = 15,500원",
              references: [
                { title: "방문요양 급여 기준표", url: "/documents/home-care-salary-guide.pdf" }
              ]
            };
          } else if (keywords.includes('주휴수당')) {
            botResponse = {
              greeting: "주휴수당 발생 조건에 대해 상세히 안내드릴게요!",
              summary: "주휴수당은 주 15시간 이상 근무자에게만 발생하며, 15시간 미만 근무자는 주휴수당이 없습니다.",
              explanation: "주휴수당 발생 조건은 다음과 같습니다:\n\n⏰ **주휴수당 발생 기준**\n• 주 15시간 이상 근무 시 발생\n• 주 15시간 미만 근무자는 주휴수당 없음\n• 근로기준법 제18조에 근거\n\n💰 **주휴수당 계산 방법**\n• 주휴수당 = 시급 × 주간 소정근로시간 × 1/40\n\n📊 **계산 예시**\n• 시급: 10,000원\n• 주간 근무시간: 20시간\n• 주휴수당 = 10,000원 × 20시간 × 1/40 = 5,000원",
              references: [
                { title: "주휴수당 계산 가이드", url: "/documents/weekly-holiday-allowance-guide.pdf" }
              ]
            };
          } else if (keywords.includes('4대보험') && keywords.includes('미가입')) {
            botResponse = {
              greeting: "4대보험 미가입자 급여지급 유의사항에 대해 상세히 안내드릴게요!",
              summary: "4대보험 미가입자는 급여에서 보험료를 공제하지 않지만, 개인적으로 보험료를 납부해야 합니다.",
              explanation: "4대보험 미가입자 급여지급 시 유의사항은 다음과 같습니다:\n\n💳 **급여 지급 방식**\n• 보험료 공제 없음: 급여에서 4대보험료를 공제하지 않음\n• 실수령액 증가: 보험료 공제 전 금액이 실수령액\n\n💰 **개인부담금**\n• 보험료는 개인이 별도로 납부해야 함\n• 국민연금: 월 급여의 9% (개인부담 4.5%)\n• 건강보험: 월 급여의 약 7% (개인부담 3.545%)\n• 고용보험: 월 급여의 약 1.5% (개인부담 0.8%)\n\n⚠️ **주의사항**\n• 4대보험 미가입 시 장기적으로 불리\n• 노후연금 수령액 감소\n• 의료보험 혜택 제한",
              references: [
                { title: "4대보험 가입 안내", url: "/documents/insurance-enrollment-guide.pdf" }
              ]
            };
          }
        }
      }

      // 매칭된 답변이 없으면 기본 답변 사용
      if (!botResponse) {
        botResponse = generateDefaultAnswer(actualQuestion, categoryId);
      }
          3: { // 제공계획서 작성
            "제공계획서는 언제 작성하나요?": {
              greeting: "제공계획서 작성 시기에 대해 안내드릴게요!",
              summary: "제공계획서는 서비스 시작 전에 작성해야 합니다.",
              explanation: "제공계획서 작성 시기는 다음과 같습니다:\n\n1. 서비스 시작 전: 어르신과 첫 만남 후 7일 이내\n2. 계획 변경 시: 서비스 내용 변경 시 즉시\n3. 정기 검토: 3개월마다 정기적으로 검토 및 수정\n4. 갱신 시기: 6개월마다 새로운 계획서 작성\n5. 긴급 변경: 어르신 상태 변화 시 즉시 수정\n\n제공계획서는 서비스의 질을 높이는 중요한 문서입니다.",
              references: [
                { title: "제공계획서 작성 가이드", url: "/documents/service-plan-guide.pdf" }
              ]
            },
            "제공계획서에 포함되어야 할 내용은 무엇인가요?": {
              greeting: "제공계획서 포함 내용에 대해 안내드릴게요!",
              summary: "어르신의 욕구, 목표, 서비스 내용, 평가 방법이 포함되어야 합니다.",
              explanation: "제공계획서에 포함되어야 할 내용은 다음과 같습니다:\n\n1. 어르신 기본정보: 이름, 나이, 주소, 연락처\n2. 욕구사정: 어르신이 원하는 서비스 내용\n3. 목표 설정: 달성하고자 하는 목표\n4. 서비스 내용: 구체적인 서비스 계획\n5. 제공 방법: 서비스 제공 방식과 시간\n6. 평가 방법: 목표 달성 여부 확인 방법\n7. 가족 요청사항: 가족이 요청한 특별한 사항\n\n모든 내용은 어르신과 가족의 동의를 받아야 합니다.",
              references: [
                { title: "제공계획서 작성 예시", url: "/documents/service-plan-example.pdf" }
              ]
            },
            "제공계획서 수정은 어떻게 하나요?": {
              greeting: "제공계획서 수정 방법에 대해 안내드릴게요!",
              summary: "어르신 상태 변화나 요청 시 즉시 수정할 수 있습니다.",
              explanation: "제공계획서 수정 절차는 다음과 같습니다:\n\n1. 수정 사유 확인: 어르신 상태 변화 또는 요청사항 파악\n2. 새로운 욕구사정: 변경된 욕구나 요청사항 조사\n3. 계획 수정: 기존 계획을 새로운 상황에 맞게 수정\n4. 동의 획득: 어르신과 가족의 동의 받기\n5. 서비스 조정: 수정된 계획에 따라 서비스 조정\n6. 문서화: 수정 내용을 계획서에 반영\n\n수정 시에는 반드시 어르신과 가족의 동의를 받아야 합니다.",
              references: [
                { title: "제공계획서 수정 가이드", url: "/documents/service-plan-revision-guide.pdf" }
              ]
            },
            "제공계획서 평가는 언제 하나요?": {
              greeting: "제공계획서 평가 시기에 대해 안내드릴게요!",
              summary: "서비스 제공 후 정기적으로 평가를 실시합니다.",
              explanation: "제공계획서 평가 시기는 다음과 같습니다:\n\n1. 정기 평가: 3개월마다 정기적으로 실시\n2. 중간 평가: 서비스 제공 중간에 실시\n3. 최종 평가: 서비스 종료 시 실시\n4. 긴급 평가: 어르신 상태 급변 시 즉시 실시\n5. 가족 요청 시: 가족이 요청할 때 실시\n\n평가 결과는 다음 계획 수립에 반영됩니다.",
              references: [
                { title: "제공계획서 평가 가이드", url: "/documents/service-plan-evaluation-guide.pdf" }
              ]
            }
          },
          4: { // 2025 고시 변경
            "2025년 요양보호사 급여 기준이 어떻게 변경되나요?": {
              greeting: "2025년 요양보호사 급여 기준 변경에 대해 안내드릴게요!",
              summary: "2025년부터 요양보호사 급여가 전반적으로 인상됩니다.",
              explanation: "2025년 요양보호사 급여 기준 변경 사항은 다음과 같습니다:\n\n1. 기본급 인상: 기존 대비 평균 8.5% 인상\n2. 야간수당: 기본급의 55%로 인상 (기존 50%)\n3. 주휴수당: 계산 방식 개선으로 실질 인상\n4. 교통비: 월 50,000원으로 인상 (기존 30,000원)\n5. 식대: 시간당 2,000원으로 인상 (기존 1,500원)\n\n구체적인 금액은 지역과 기관에 따라 차이가 있을 수 있습니다.",
              references: [
                { title: "2025년 요양보호사 급여 기준", url: "/documents/2025-salary-standard.pdf" }
              ]
            },
            "2025년 서비스 제공 시간이 변경되나요?": {
              greeting: "2025년 서비스 제공 시간 변경에 대해 안내드릴게요!",
              summary: "2025년부터 서비스 제공 시간이 더욱 유연해집니다.",
              explanation: "2025년 서비스 제공 시간 변경 사항은 다음과 같습니다:\n\n1. 최소 서비스 시간: 30분 단위로 조정 가능\n2. 야간 서비스: 오후 8시~오전 8시 확대\n3. 주말 서비스: 토요일 오후 서비스 추가\n4. 공휴일 서비스: 공휴일에도 서비스 제공 가능\n5. 긴급 서비스: 24시간 긴급 서비스 체계 구축\n\n어르신의 필요에 따라 더욱 유연한 서비스가 가능해집니다.",
              references: [
                { title: "2025년 서비스 시간 변경 안내", url: "/documents/2025-service-time-changes.pdf" }
              ]
            },
            "2025년 자격 요건이 변경되나요?": {
              greeting: "2025년 자격 요건 변경에 대해 안내드릴게요!",
              summary: "2025년부터 요양보호사 자격 요건이 강화됩니다.",
              explanation: "2025년 요양보호사 자격 요건 변경 사항은 다음과 같습니다:\n\n1. 교육 시간: 240시간에서 280시간으로 증가\n2. 실습 시간: 40시간에서 60시간으로 증가\n3. 자격시험: 필기시험과 실기시험 분리\n4. 갱신 교육: 3년마다 24시간 갱신 교육 의무화\n5. 전문 분야: 특화 분야별 추가 교육 과정 신설\n\n기존 자격증 소지자는 2025년 12월까지 갱신 교육을 완료해야 합니다.",
              references: [
                { title: "2025년 자격 요건 변경 안내", url: "/documents/2025-qualification-changes.pdf" }
              ]
            },
            "2025년 복지 혜택이 추가되나요?": {
              greeting: "2025년 복지 혜택 추가에 대해 안내드릴게요!",
              summary: "2025년부터 요양보호사 복지 혜택이 대폭 확대됩니다.",
              explanation: "2025년 요양보호사 복지 혜택 추가 사항은 다음과 같습니다:\n\n1. 건강검진: 연 2회 무료 건강검진\n2. 교육 지원: 연간 100만원 교육비 지원\n3. 휴가 지원: 연차휴가 사용 시 추가 수당 지급\n4. 보험 지원: 상해보험 가입비 지원\n5. 정착 지원: 신규 입사자 정착금 100만원 지원\n6. 자녀 교육: 자녀 교육비 일부 지원\n\n복지 혜택은 기관 규모와 근무 조건에 따라 차이가 있을 수 있습니다.",
              references: [
                { title: "2025년 복지 혜택 안내", url: "/documents/2025-welfare-benefits.pdf" }
              ]
            }
          },
          5: { // 상담일지 작성
            "상담일지 작성 시 주의사항은 무엇인가요?": {
              greeting: "상담일지 작성 주의사항에 대해 안내드릴게요!",
              summary: "객관적이고 구체적으로 작성하며, 개인정보 보호에 유의해야 합니다.",
              explanation: "상담일지 작성 시 주의사항은 다음과 같습니다:\n\n1. 객관적 기록: 사실에 근거한 객관적인 내용으로 작성\n2. 구체적 기술: '좋았다', '나빴다' 대신 구체적인 행동 기술\n3. 개인정보 보호: 민감한 개인정보는 기재하지 않음\n4. 시간 순서: 서비스 제공 순서대로 시간순 기록\n5. 가족 요청사항: 가족이 요청한 사항도 포함\n6. 서명 확인: 작성 후 어르신 또는 가족 서명 받기\n\n상담일지는 법적 증빙자료이므로 정확하게 작성해야 합니다.",
              references: [
                { title: "상담일지 작성 주의사항", url: "/documents/consultation-log-precautions.pdf" }
              ]
            },
            "상담일지에 반드시 포함되어야 할 내용은 무엇인가요?": {
              greeting: "상담일지 필수 포함 내용에 대해 안내드릴게요!",
              summary: "서비스 제공 시간, 내용, 어르신 반응, 다음 계획이 포함되어야 합니다.",
              explanation: "상담일지에 반드시 포함되어야 할 내용은 다음과 같습니다:\n\n1. 기본 정보: 날짜, 시간, 서비스 제공 시간\n2. 서비스 내용: 구체적으로 제공한 서비스 내용\n3. 어르신 상태: 어르신의 건강 상태와 기분\n4. 어르신 반응: 서비스에 대한 어르신의 반응\n5. 특이사항: 특별히 주의할 점이나 변화\n6. 가족 요청사항: 가족이 요청한 사항\n7. 다음 계획: 다음 서비스 계획\n8. 서명: 요양보호사, 어르신 또는 가족 서명\n\n모든 내용은 구체적이고 객관적으로 작성해야 합니다.",
              references: [
                { title: "상담일지 작성 예시", url: "/documents/consultation-log-example.pdf" }
              ]
            },
            "상담일지 작성 시간은 언제인가요?": {
              greeting: "상담일지 작성 시간에 대해 안내드릴게요!",
              summary: "서비스 제공 직후 또는 당일 중에 작성해야 합니다.",
              explanation: "상담일지 작성 시간은 다음과 같습니다:\n\n1. 즉시 작성: 서비스 제공 직후 가능한 한 빨리 작성\n2. 당일 완료: 서비스 제공 당일 중에 반드시 작성 완료\n3. 기억 생생할 때: 기억이 생생할 때 작성하는 것이 정확함\n4. 정기 작성: 매일 정해진 시간에 작성하는 습관\n5. 검토 시간: 작성 후 내용을 다시 한번 검토\n\n늦어도 서비스 제공 다음 날까지는 반드시 작성해야 합니다.",
              references: [
                { title: "상담일지 작성 시간 가이드", url: "/documents/consultation-log-timing.pdf" }
              ]
            },
            "상담일지 오류 수정은 어떻게 하나요?": {
              greeting: "상담일지 오류 수정 방법에 대해 안내드릴게요!",
              summary: "오류 발견 시 즉시 수정하고 수정 사유를 명시해야 합니다.",
              explanation: "상담일지 오류 수정 방법은 다음과 같습니다:\n\n1. 즉시 수정: 오류 발견 시 즉시 수정\n2. 수정 표시: 오류 부분을 한 줄로 지우고 위에 수정 내용 작성\n3. 수정 사유: 수정 사유를 간단히 메모\n4. 수정 날짜: 수정한 날짜와 시간 기록\n5. 서명 확인: 수정 후 어르신 또는 가족 서명 받기\n6. 원본 보존: 원본 내용을 완전히 지우지 말고 수정 표시\n\n수정 시에는 투명하고 정확하게 처리해야 합니다.",
              references: [
                { title: "상담일지 오류 수정 가이드", url: "/documents/consultation-log-correction.pdf" }
              ]
            }
          },
          6: { // AI 상담 사용법
            "AI 상담은 언제 이용할 수 있나요?": {
              greeting: "AI 상담 이용 시간에 대해 안내드릴게요!",
              summary: "AI 상담은 24시간 언제든지 이용할 수 있습니다.",
              explanation: "AI 상담 이용 시간은 다음과 같습니다:\n\n1. 24시간 이용: 언제든지 질문하고 답변 받기 가능\n2. 즉시 응답: 질문 후 몇 초 내에 답변 제공\n3. 복잡한 상담: 복잡한 상담의 경우 전문 상담원 연결\n4. 긴급 상담: 긴급한 경우 즉시 전문가 연결\n5. 정기 상담: 정기적인 상담도 가능\n\nAI 상담은 요양보호사님의 업무 효율성을 높여드립니다.",
              references: [
                { title: "AI 상담 이용 가이드", url: "/documents/ai-consultation-guide.pdf" }
              ]
            },
            "AI 상담에서 어떤 질문을 할 수 있나요?": {
              greeting: "AI 상담 질문 범위에 대해 안내드릴게요!",
              summary: "요양보호 업무와 관련된 모든 질문을 할 수 있습니다.",
              explanation: "AI 상담에서 할 수 있는 질문은 다음과 같습니다:\n\n1. 업무 관련: 급여, 근무, 서비스 제공 방법\n2. 법규 관련: 관련 법령, 규정, 기준\n3. 기술 관련: 요양보호 기술, 안전 수칙\n4. 행정 관련: 서류 작성, 절차, 제도\n5. 복지 관련: 복지 혜택, 지원 제도\n6. 기타: 궁금한 모든 사항\n\n복잡한 상담의 경우 전문 상담원이 연결됩니다.",
              references: [
                { title: "AI 상담 질문 예시", url: "/documents/ai-consultation-examples.pdf" }
              ]
            },
            "AI 상담 답변의 정확도는 어떻게 되나요?": {
              greeting: "AI 상담 답변 정확도에 대해 안내드릴게요!",
              summary: "AI 상담은 공단 기준에 맞는 정확한 답변을 제공합니다.",
              explanation: "AI 상담 답변 정확도는 다음과 같습니다:\n\n1. 공단 기준: 보건복지부 및 관련 공단 기준 준수\n2. 최신 정보: 최신 법령과 제도 반영\n3. 검증된 답변: 전문가 검토를 거친 답변\n4. 지속 업데이트: 새로운 정보로 지속 업데이트\n5. 전문가 연결: 복잡한 경우 전문가 연결\n\nAI 답변에 의문이 있으면 언제든지 전문가와 상담하실 수 있습니다.",
              references: [
                { title: "AI 상담 정확도 안내", url: "/documents/ai-consultation-accuracy.pdf" }
              ]
            },
            "AI 상담 기록은 어떻게 관리되나요?": {
              greeting: "AI 상담 기록 관리에 대해 안내드릴게요!",
              summary: "AI 상담 기록은 안전하게 보관되며 개인정보가 보호됩니다.",
              explanation: "AI 상담 기록 관리 방법은 다음과 같습니다:\n\n1. 안전 보관: 암호화된 서버에 안전하게 보관\n2. 개인정보 보호: 개인정보는 별도 분리 보관\n3. 접근 제한: 본인만 접근 가능\n4. 보관 기간: 3년간 보관 후 자동 삭제\n5. 내보내기: 필요 시 상담 기록 내보내기 가능\n6. 삭제 요청: 언제든지 기록 삭제 요청 가능\n\n개인정보 보호법을 준수하여 안전하게 관리됩니다.",
              references: [
                { title: "AI 상담 기록 관리 안내", url: "/documents/ai-consultation-records.pdf" }
              ]
            }
          }
        };

        // 해당 카테고리의 질문 답변 찾기
        if (questionAnswers[categoryId]) {
          const categoryQuestions = questionAnswers[categoryId];
          
          // 정확한 질문 매칭 시도
          if (categoryQuestions[actualQuestion]) {
            botResponse = categoryQuestions[actualQuestion];
          } else {
            // 질문 번호 기반 매칭 (Q1, Q2, Q3, Q4)
            const questionNumberMatch = suggestion.match(/Q(\d+)/);
            if (questionNumberMatch) {
              const questionNumber = parseInt(questionNumberMatch[1]);
              const questionKeys = Object.keys(categoryQuestions);
              
              if (questionNumber >= 1 && questionNumber <= questionKeys.length) {
                const targetQuestion = questionKeys[questionNumber - 1];
                botResponse = categoryQuestions[targetQuestion];
              }
            }
            
            // 질문 번호 매칭이 실패한 경우 키워드 기반 매칭
            if (botResponse === "죄송합니다. 해당 질문에 대한 답변을 찾을 수 없습니다.") {
              let matched = false;
              for (const [key, value] of Object.entries(categoryQuestions)) {
                // 키워드 기반 매칭 개선
                const keywords = actualQuestion.split(' ').filter(word => word.length > 1);
                const keyKeywords = key.split(' ').filter(word => word.length > 1);
                
                // 공통 키워드가 2개 이상 있으면 매칭
                const commonKeywords = keywords.filter(kw => 
                  keyKeywords.some(kk => kk.includes(kw) || kw.includes(kk))
                );
                
                if (commonKeywords.length >= 2) {
                  botResponse = value;
                  matched = true;
                  break;
                }
                
                // 기존 방식도 유지
                if (actualQuestion.includes(key) || key.includes(actualQuestion)) {
                  botResponse = value;
                  matched = true;
                  break;
                }
              }
              
              // 매칭되지 않았으면 기본 답변 사용
              if (!matched) {
                botResponse = generateDefaultAnswer(actualQuestion, categoryId);
              }
            }
          }
        }
      } else {
        // 카테고리 ID를 찾을 수 없는 경우 기존 챗봇 API 사용
        try {
          const chatResponse = await askChatbot(suggestion);
          botResponse = chatResponse.bot_message || "죄송합니다. 응답을 생성하는 중에 오류가 발생했습니다.";
        } catch (chatError) {
          console.error('챗봇 API 오류:', chatError);
          botResponse = "죄송합니다. 응답을 생성하는 중에 오류가 발생했습니다.";
        }
      }
      
      // 로딩 메시지 제거하고 실제 응답 추가
      setMessages(prev => {
        const filteredMessages = prev.filter(msg => !msg.isLoading);
        return [...filteredMessages, {
          id: Date.now() + 2,
          text: botResponse,
          sender: 'ai',
          timestamp: new Date().toLocaleTimeString(),
          suggestions: null
        }];
      });

      // sendMessageWithAI가 자동으로 메시지를 저장하므로 별도 저장 불필요

    } catch (error) {
      // 로딩 메시지 제거하고 에러 메시지 추가
      setMessages(prev => {
        const filteredMessages = prev.filter(msg => !msg.isLoading);
        return [...filteredMessages, {
          id: Date.now() + 2,
          text: "죄송합니다. 일시적인 오류가 발생했습니다. 잠시 후 다시 시도해주세요.",
          sender: 'ai',
          timestamp: new Date().toLocaleTimeString(),
          suggestions: null
        }];
      });
      console.error('API 오류:', error);
    }
  };

  const handleKeyPress = (e) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSendMessage();
    }
  };

  const handleNewChat = () => {
    setMessages([]);
    setIsChatHistoryOpen(false);
    setIsChatMode(false);
  };

  const handleChatHistory = () => {
    setIsChatHistoryOpen(!isChatHistoryOpen);
  };

  const handleFaqPopupOpen = () => {
    setIsFaqPopupOpen(true);
  };

  const handleFaqPopupClose = () => {
    setIsFaqPopupOpen(false);
  };

  return (
    <div className="flex flex-col h-screen w-full bg-white font-sans">
      {/* 헤더 */}
      <Header />

      <div className="flex flex-1 w-full">
        {/* 왼쪽 사이드바 */}
        <LeftSidebar 
          isChatHistoryOpen={isChatHistoryOpen}
          onNewChatClick={handleNewChat}
          onChatHistoryClick={handleChatHistory}
          isOpen={isLeftSidebarOpen}
          onToggle={(open) => setIsLeftSidebarOpen(open)}
        />

        {/* 메인 콘텐츠 영역 */}
        <div className="flex-1 flex flex-col w-full">
          {isChatHistoryOpen ? (
            // 채팅 내역 화면
            <main className="flex flex-1 flex-col p-2 sm:p-4 lg:p-6 xl:p-8 w-full">
              <div className="mb-6">
                <h2 className="text-2xl font-bold text-gray-800 mb-2">채팅 내역</h2>
                <p className="text-gray-600">이전 대화 내용을 확인하고 계속할 수 있습니다.</p>
              </div>

              {chatHistory.length === 0 ? (
                <div className="text-center text-gray-500 py-8">
                  <div className="w-16 h-16 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-4">
                    <span className="text-2xl">💬</span>
                  </div>
                  <p className="text-lg font-semibold mb-2">채팅 내역이 없습니다</p>
                  <p className="text-sm">새로운 대화를 시작해보세요!</p>
                </div>
              ) : (
                <div className="space-y-4">
                  {chatHistory.map((chat) => (
                    <div
                      key={chat.id}
                      className={`p-4 border rounded-lg cursor-pointer transition-colors ${
                        selectedChatId === chat.id ? 'border-blue-500 bg-blue-50' : 'hover:border-gray-300'
                      }`}
                      onClick={() => setSelectedChatId(chat.id)}
                    >
                      <div className="flex justify-between items-start mb-2">
                        <h3 className="font-semibold text-gray-800">{chat.title}</h3>
                        <span className="text-xs text-gray-500">{chat.timestamp}</span>
                      </div>
                      <p className="text-sm text-gray-600 mb-2 line-clamp-2">{chat.lastMessage}</p>
                      <div className="flex justify-between items-center">
                        <span className="text-xs text-gray-500">{chat.messageCount}개의 메시지</span>
                        <span className="text-xs text-blue-500">계속하기 →</span>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </main>
          ) : (
            // 메인 콘텐츠 영역 (채팅 공간)
            <div className="flex-1 flex flex-col w-full">
              {!isChatMode ? (
                // 메인 대시보드 화면
                <main className="flex flex-1 items-center justify-center gap-6 sm:gap-8 lg:gap-12 xl:gap-16 w-full px-4 sm:px-6 lg:px-8">
                  {/* AI 캐릭터 */}
                  <div className="flex-shrink-0">
                    <img src="/chatcharacter.png" alt="돌봄이 캐릭터" className="w-40 sm:w-48 lg:w-56 xl:w-64 h-auto" />
                  </div>

                  {/* 메인 콘텐츠 */}
                  <div className="flex-1 max-w-2xl lg:max-w-3xl">
                    <h2 className="text-blue-600 text-2xl sm:text-3xl lg:text-4xl font-bold mb-4">
                      돌봄다리 AI 전문가의 24시간 상담 서비스
                    </h2>
                    <p className="text-gray-600 mb-6 text-base sm:text-lg">
                      실무에 꼭 맞는 공단 기준 상담, 365일 24시간 답해드립니다.
                    </p>
                    <p className="text-blue-500 font-semibold mb-6 text-base sm:text-lg">
                      궁금한 점이 있으시면 아래 질문을 클릭하거나 직접 입력해보세요!
                    </p>

                    {/* 프리셋 질문 버튼들 */}
                    <div className="grid grid-cols-3 gap-3 sm:gap-4 lg:gap-5 mb-8">
                      <button
                        onClick={() => handleQuestionClick('요양보호사 입·퇴사')}
                        className="border-2 border-blue-500 text-blue-600 bg-white px-3 py-3 rounded-lg text-sm sm:text-base hover:bg-blue-50 hover:border-blue-600 transition-all duration-200 font-medium shadow-sm"
                      >
                        🧑‍⚕️ 요양보호사 입·퇴사
                      </button>
                      <button
                        onClick={() => handleQuestionClick('급여 계산')}
                        className="border-2 border-blue-500 text-blue-600 bg-white px-3 py-3 rounded-lg text-sm sm:text-base hover:bg-blue-50 hover:border-blue-600 transition-all duration-200 font-medium shadow-sm"
                      >
                        💰 급여 계산
                      </button>
                      <button
                        onClick={() => handleQuestionClick('제공계획서 작성')}
                        className="border-2 border-blue-500 text-blue-600 bg-white px-3 py-3 rounded-lg text-sm sm:text-base hover:bg-blue-50 hover:border-blue-600 transition-all duration-200 font-medium shadow-sm"
                      >
                        📝 제공계획서 작성
                      </button>
                      <button
                        onClick={() => handleQuestionClick('2025 고시 변경')}
                        className="border-2 border-blue-500 text-blue-600 bg-white px-3 py-3 rounded-lg text-sm sm:text-base hover:bg-blue-50 hover:border-blue-600 transition-all duration-200 font-medium shadow-sm"
                      >
                        📜 2025 고시 변경
                      </button>
                      <button
                        onClick={() => handleQuestionClick('상담일지 작성')}
                        className="border-2 border-blue-500 text-blue-600 bg-white px-3 py-3 rounded-lg text-sm sm:text-base hover:bg-blue-50 hover:border-blue-600 transition-all duration-200 font-medium shadow-sm"
                      >
                        💬 상담일지 작성
                      </button>
                      <button
                        onClick={() => handleQuestionClick('AI 상담 사용법')}
                        className="border-2 border-blue-500 text-blue-600 bg-white px-3 py-3 rounded-lg text-sm sm:text-base hover:bg-blue-50 hover:border-blue-600 transition-all duration-200 font-medium shadow-sm"
                      >
                        💡 AI 상담 사용법
                      </button>
                    </div>

                    {/* 입력창 */}
                    <div className="w-full flex gap-3">
                      <input
                        type="text"
                        value={inputText}
                        onChange={(e) => setInputText(e.target.value)}
                        onKeyPress={handleKeyPress}
                        placeholder="무엇이든 궁금한 점이 있다면 편하게 말씀해주세요."
                        className="flex-1 border-2 border-gray-300 rounded-full px-6 h-14 text-base shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                      />
                      <button
                        onClick={handleSendMessage}
                        disabled={!inputText.trim() || isLoading}
                        className="bg-blue-500 text-white w-14 h-14 rounded-full hover:bg-blue-600 transition disabled:bg-gray-300 disabled:cursor-not-allowed flex items-center justify-center shadow-sm"
                        aria-label="메시지 전송"
                      >
                        <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 10l7-7m0 0l7 7m-7-7v18" />
                        </svg>
                      </button>
                    </div>
                  </div>
                </main>
              ) : (
                // 채팅 화면
                <main className="flex flex-1 flex-col w-full">
                  {/* 메시지 목록 */}
                  <div className="flex-1 overflow-y-auto p-2 sm:p-4 lg:p-6 xl:p-8 space-y-4 w-full">
                    {/* 날짜 표시 */}
                    <div className="text-center text-gray-500 text-sm mb-4">
                      <p>{new Date().toLocaleDateString('ko-KR', { 
                        year: 'numeric', 
                        month: 'long', 
                        day: 'numeric', 
                        weekday: 'long' 
                      })}</p>
                      <p className="text-xs mt-1">* 돌봄다리 AI는 공단 기준에 기반해 안내하나, 일부 오류가 발생할 수 있습니다.</p>
                    </div>

                    {messages.length === 0 ? (
                      <div className="text-center text-gray-500 mt-8">
                        <div className="w-16 h-16 bg-blue-100 rounded-full flex items-center justify-center mx-auto mb-4">
                          <span className="text-2xl">🤖</span>
                        </div>
                        <p className="text-lg font-semibold mb-2">돌봄이 AI와 대화를 시작해보세요!</p>
                        <p className="text-sm">복지 현장에서 궁금한 점을 편하게 물어보세요.</p>
                      </div>
                    ) : (
                      messages.map((message) => (
                        <div
                          key={message.id}
                          className={`flex ${message.sender === 'user' ? 'justify-end' : 'justify-start'} mb-4`}
                        >
                          {message.sender === 'ai' && (
                            <div className="flex items-start gap-4">
                              <div className="w-12 h-12 bg-blue-500 rounded-full flex items-center justify-center text-white text-xl relative">
                                <div className="text-2xl">🤖</div>
                                <div className="absolute -top-1 -right-1 w-4 h-4 bg-green-500 rounded-full flex items-center justify-center">
                                  <div className="w-2 h-2 bg-white rounded-full"></div>
                                </div>
                              </div>
                              <div className="max-w-2xl">
                                <div className="bg-gray-100 border border-gray-300 rounded-3xl rounded-tl-md px-8 py-6 shadow-lg">
                                  <div className="flex items-center gap-3 mb-4">
                                    <span className="text-lg font-bold text-gray-800">돌봄다리 AI</span>
                                    <span className="text-sm text-gray-500">{message.timestamp}</span>
                                  </div>
                                  <div className="text-base text-gray-700 leading-relaxed space-y-4">
                                    {message.isLoading ? (
                                      <span className="flex items-center gap-2">
                                        <span className="animate-spin">⏳</span>
                                        {message.text}
                                      </span>
                                    ) : (
                                      <>
                                        {typeof message.text === 'object' ? (
                                          // 구조화된 답변 표시
                                          <div className="space-y-4">
                                            <p className="text-lg">{message.text.greeting}</p>
                                            
                                            {message.text.summary && (
                                              <div className="bg-yellow-50 border-l-4 border-yellow-400 p-4 rounded-r-lg">
                                                <div className="flex items-center gap-2 mb-2">
                                                  <span className="text-yellow-600 font-semibold">요약</span>
                                                </div>
                                                <p className="text-gray-700 font-medium">{message.text.summary}</p>
                                              </div>
                                            )}
                                            
                                            {message.text.explanation && (
                                              <div>
                                                <div className="flex items-center gap-2 mb-2">
                                                  <span className="text-gray-600 font-semibold">설명</span>
                                                </div>
                                                <div className="text-gray-700 whitespace-pre-line">
                                                  {message.text.explanation}
                                                </div>
                                              </div>
                                            )}
                                            
                                            {message.text.references && message.text.references.length > 0 && (
                                              <div>
                                                <div className="flex items-center gap-2 mb-3">
                                                  <span className="text-green-600">📌</span>
                                                  <span className="text-gray-600 font-semibold">참고 자료</span>
                                                </div>
                                                <div className="space-y-2">
                                                  {message.text.references.map((ref, index) => (
                                                    <a
                                                      key={index}
                                                      href={ref.url}
                                                      target="_blank"
                                                      rel="noopener noreferrer"
                                                      className="block p-3 bg-green-50 hover:bg-green-100 text-green-700 rounded-lg border border-green-200 transition-colors font-medium"
                                                    >
                                                      📄 {ref.title}
                                                    </a>
                                                  ))}
                                                </div>
                                              </div>
                                            )}
                                          </div>
                                        ) : (
                                          // 일반 텍스트 답변 표시
                                          <p className="text-lg">{message.text}</p>
                                        )}
                                        
                                        {/* 제안 질문 표시 */}
                                        {message.suggestions && message.suggestions.length > 0 && (
                                          <div className="mt-6">
                                            <div className="flex items-center gap-2 mb-4">
                                              <span className="text-red-500 text-xl">📌</span>
                                              <span className="text-base font-semibold text-gray-800">자주 묻는 질문</span>
                                            </div>
                                            <div className="space-y-3">
                                              {message.suggestions.map((suggestion, index) => (
                                                <button
                                                  key={index}
                                                  onClick={() => handleSuggestionClick(suggestion)}
                                                  className="w-full text-left p-4 text-base bg-white hover:bg-gray-50 text-gray-700 rounded-xl border border-gray-200 transition-colors font-medium shadow-sm"
                                                >
                                                  {suggestion}
                                                </button>
                                              ))}
                                            </div>
                                          </div>
                                        )}
                                      </>
                                    )}
                                  </div>
                                </div>
                              </div>
                            </div>
                          )}
                          
                          {message.sender === 'user' && (
                            <div className="max-w-xs lg:max-w-md">
                              <div className="bg-blue-500 text-white rounded-2xl rounded-br-md px-4 py-3 shadow-sm">
                                <div className="flex items-center justify-end gap-2 mb-2">
                                  <span className="text-xs opacity-80">{message.timestamp}</span>
                                </div>
                                <p className="text-sm leading-relaxed">
                                  {message.text}
                                </p>
                              </div>
                            </div>
                          )}
                        </div>
                      ))
                    )}
                  </div>

                  {/* 입력 영역 */}
                  <div className="border-t p-2 sm:p-4 lg:p-6 xl:p-8 w-full">
                    <div className="flex gap-3">
                      <input
                        type="text"
                        value={inputText}
                        onChange={(e) => setInputText(e.target.value)}
                        onKeyPress={handleKeyPress}
                        placeholder="무엇이든 궁금한 점이 있다면 편하게 말씀해주세요."
                        className="flex-1 border border-gray-300 rounded-full px-6 h-12 text-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                      />
                      <button
                        onClick={handleSendMessage}
                        disabled={!inputText.trim() || isLoading}
                        className="bg-blue-500 text-white px-6 py-2 rounded-full hover:bg-blue-600 transition disabled:bg-gray-300 disabled:cursor-not-allowed flex items-center justify-center"
                        aria-label="메시지 전송"
                      >
                        <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 10l7-7m0 0l7 7m-7-7v18" />
                        </svg>
                      </button>
                    </div>
                  </div>
                </main>
              )}
            </div>
          )}
        </div>

        {/* 오른쪽 사이드바 */}
        <RightSidebar 
          onFaqPopupOpen={handleFaqPopupOpen}
          isOpen={isRightSidebarOpen}
          onToggle={(open) => setIsRightSidebarOpen(open)}
        />
      </div>

      {/* FAQ 팝업 */}
      <FaqPopup
        isOpen={isFaqPopupOpen}
        onClose={handleFaqPopupClose}
      />
    </div>
  );
}

export default Dashboard;